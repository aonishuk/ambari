--- ambari-agent/src/main/python/ambari_agent/ClusterAlertDefinitionsCache.py
+++ ambari-agent/src/main/python/ambari_agent/ClusterAlertDefinitionsCache.py
@@ -39,6 +39,9 @@ limitations under the License.
 """
 
 from ambari_agent.ClusterCache import ClusterCache
+import logging
+
+logger = logging.getLogger(__name__)
 
 class ClusterAlertDefinitionsCache(ClusterCache):
   """
@@ -70,6 +73,11 @@ class ClusterAlertDefinitionsCache(ClusterCache):
     mutable_dict = self._get_mutable_copy()
 
     for cluster_id in cache_update:
+      # adding a new cluster via UPDATE
+      if not cluster_id in mutable_dict:
+        mutable_dict[cluster_id] = cache_update[cluster_id]
+        continue
+
       for alert_definition in cache_update[cluster_id]['alertDefinitions']:
         id_to_update = alert_definition['definitionId']
         index_of_alert = self.get_alert_definition_index_by_id(mutable_dict, cluster_id, id_to_update)
@@ -82,9 +90,20 @@ class ClusterAlertDefinitionsCache(ClusterCache):
 
   def cache_delete(self, cache_update, cache_hash):
     mutable_dict = self._get_mutable_copy()
+    clusters_ids_to_delete = []
 
     for cluster_id in cache_update:
+      if not cluster_id in mutable_dict:
+        logger.error("Cannot do alert_definitions delete for cluster cluster_id={0}, because do not have information about the cluster".format(cluster_id))
+        continue
+
+      # deleting whole cluster
+      if cache_update[cluster_id] == {}:
+        clusters_ids_to_delete.append(cluster_id)
+        continue
+
       for alert_definition in cache_update[cluster_id]['alertDefinitions']:
+
         id_to_update = alert_definition['definitionId']
         index_of_alert = self.get_alert_definition_index_by_id(mutable_dict, cluster_id, id_to_update)
 
@@ -93,6 +112,9 @@ class ClusterAlertDefinitionsCache(ClusterCache):
 
         del mutable_dict[cluster_id]['alertDefinitions'][index_of_alert]
 
+    for cluster_id in clusters_ids_to_delete:
+      del mutable_dict[cluster_id]
+
     self.rewrite_cache(mutable_dict, cache_hash)
 
 
