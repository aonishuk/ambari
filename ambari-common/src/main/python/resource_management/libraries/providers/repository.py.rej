--- ambari-common/src/main/python/resource_management/libraries/providers/repository.py
+++ ambari-common/src/main/python/resource_management/libraries/providers/repository.py
@@ -65,7 +66,14 @@ class RepositoryProvider(Provider):
                  content = StaticFile(tmpf.name)
             )
 
-            self.update(repo_file_path)
+            try:
+              self.update(repo_file_path)
+            except:
+              # remove created file or else ambari will consider that update was successful and skip repository operations
+              File(repo_file_path,
+                   action = "delete",
+              )
+              raise
             
     RepositoryProvider.repo_files_content.clear()
 
@@ -136,12 +144,23 @@ class UbuntuRepositoryProvider(RepositoryProvider):
   def update(self, repo_file_path):
     repo_file_name = os.path.basename(repo_file_path)
     update_cmd_formatted = [format(x) for x in self.update_cmd]
-    # this is time expensive
-    retcode, out = checked_call(update_cmd_formatted, sudo=True, quiet=False)
+    update_failed_exception = None
+
+    try:
+      # this is time expensive
+      retcode, out = call(update_cmd_formatted, sudo=True, quiet=False)
+    except ExecutionFailed as ex:
+      out = ex.out
+      update_failed_exception = ex
 
-    # add public keys for new repos
     missing_pkeys = set(re.findall(self.missing_pkey_regex, out))
+
+    # failed but NOT due to missing pubkey
+    if update_failed_exception and not missing_pkeys:
+      raise update_failed_exception
+
     for pkey in missing_pkeys:
+      # add public keys for new repos
       Execute(self.app_pkey_cmd_prefix + (pkey,),
               timeout = 15, # in case we are on the host w/o internet (using localrepo), we should ignore hanging
               ignore_failures = True,
